server:
  port: 8218
  tomcat:
    uri-encoding: UTF-8
  servlet:
    context-path: /

logging: # 日志级别从低到高分为：trace < debug < info < warn < error < fatal
  level: # 日志级别控制前缀
    root: info # 控制root 的日志级别为debug以上
    org:
      springframework: info #控制org.springframework包下的日志级别为info以上

spring:
  application:
    name: SpringBoot2-chapter18-springDataJPA
  devtools:
    restart:
      enabled: true #热部署生效
      additional-paths:
        - src/main/java
      exclude: templates/** # #classpath目录下的webviews文件夹内容修改不重启
  thymeleaf:
    cache: false
    check-template: true
    check-template-location: true
    enabled: true
    enable-spring-el-compiler: false
    prefix: classpath:/templates/
    suffix: .html
    encoding: UTF-8
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  datasource:
    url: jdbc:mysql://rm-duleilewuhen.mysql.rds.aliyuncs.com:3306/spring?useUnicode=true&characterEncoding=UTF-8&useSSL=true
    username: spring #数据库登录账号
    password: spring #数据库登录密码
    driver-class-name: com.mysql.jdbc.Driver
  jpa:
    hibernate: # 其主要作用是：自动创建、更新、验证数据库表结构
      # ddl-auto: create ## 每次加载hibernate时都会删除上一次的生成的表，然后再重新来生成新表，哪怕两次没有任何改变也要这样执行
      # ddl-auto: update ## 第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），
                         ## 以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。
                         ## 要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
      ddl-auto: validate ## 每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值
      # ddl-auto: none   ## 启动时不做任何操作
      naming:
        strategy: org.hibernate.cfg.ImprovedNamingStrategy # 生成的数据表的列的映射策略
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
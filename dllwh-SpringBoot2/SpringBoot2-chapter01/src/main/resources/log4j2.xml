<?xml version="1.0" encoding="UTF-8"?>

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE >ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出；可以设置成OFF(关闭)或Error(只输出错误信息) -->
<!--monitorInterval：Log4j2能够自动检测修改配置文件和重新配置本身，设置间隔秒数 -->

<configuration status="OFF" monitorInterval="30">
<!-- 缺省配置（用于开发环境），配置日志文件输出目录和动态参数。其他环境需要在VM参数中指定； “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值 -->
<Properties>
	<!--定义日志文件的存储地址 -->
	<property name="LOG_HOME" value="/Users/dllwh/DevLog/SpringBoot-chapter/" />
</Properties>
<!-- 定义所有的appender -->
<appenders>
	<!--这个输出控制台的配置 -->
	<Console name="Console" target="SYSTEM_OUT">
		<!--只接受程序中DEBUG级别的日志进行处理 -->
		<ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY" />
		<!--输出日志的格式 -->
		<PatternLayout pattern="[%date{yyyy-MM-dd HH:mm:ss.SSS}] %-5level %class{36} %L %M - %msg%xEx%n" />
	</Console>

	<!--处理DEBUG级别的日志，并把该日志放到logs/debug.log文件中 -->
	<!--打印出DEBUG级别日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
	<RollingFile name="RollingFileDebug" fileName="${LOG_HOME}/logs/debug.log" append="true"
		filePattern="${LOG_HOME}/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log.gz">
		<Filters>
			<ThresholdFilter level="DEBUG" />
			<ThresholdFilter level="INFO" onMatch="DENY"
				onMismatch="NEUTRAL" />
		</Filters>
		<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n" />
		<Policies>
			<SizeBasedTriggeringPolicy size="500 MB" />
			<TimeBasedTriggeringPolicy />
		</Policies>
	</RollingFile>

	<!--处理INFO级别的日志，并把该日志放到logs/info.log文件中 -->
	<!-- info及以上级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
	<RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/logs/info.log" append="true"
		filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz">
		<Filters>
			<!--只接受INFO级别的日志，其余的全部拒绝处理 -->
			<ThresholdFilter level="INFO" />
			<ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL" />
		</Filters>
		<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n" />
		<Policies>
			<!-- 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小 -->
			<SizeBasedTriggeringPolicy size="10MB" />
			<!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour -->
			<TimeBasedTriggeringPolicy/>
		</Policies>
	</RollingFile>

	<!--处理WARN级别的日志，并把该日志放到logs/warn.log文件中 -->
	<RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/logs/warn.log" append="true"
		filePattern="${LOG_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz">
		<Filters>
			<ThresholdFilter level="WARN"  onMatch="ACCEPT" onMismatch="DENY"/>
			<ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL" />
		</Filters>
		<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n" />
		<Policies>
			<SizeBasedTriggeringPolicy size="10MB" />
			<TimeBasedTriggeringPolicy />
		</Policies>
	</RollingFile>

	<!--处理error级别的日志，并把该日志放到logs/error.log文件中 -->
	<RollingFile name="RollingFileError" fileName="${LOG_HOME}/logs/error.log" append="true"
		filePattern="${LOG_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz">
		<ThresholdFilter level="ERROR" />
		<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n" />
		<Policies>
			<SizeBasedTriggeringPolicy size="500 MB" />
			<TimeBasedTriggeringPolicy />
		</Policies>
	</RollingFile>

	<!--druid的日志记录追加器 -->
	<RollingFile name="druidSqlRollingFile" fileName="${LOG_HOME}/logs/druid-sql.log" append="true" 
		filePattern="${LOG_HOME}/$${date:yyyy-MM}/api-%d{yyyy-MM-dd}-%i.log.gz">
		<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %L %M - %msg%xEx%n" />
		<Policies>
			<SizeBasedTriggeringPolicy size="500 MB" />
			<TimeBasedTriggeringPolicy />
		</Policies>
	</RollingFile>
</appenders>

<!-- 全局配置，默认所有的Logger都继承此配置 -->
<!-- 用来配置LoggerConfig，包含一个root logger和若干个普通logger。 additivity指定是否同时输出log到父类的appender，缺省为true。 
一个Logger可以绑定多个不同的Appender。只有定义了logger并引入的appender，appender才会生效。 -->
<loggers>
	<!-- root logger 配置 -->
	<root level="DEBUG">
		<appender-ref ref="Console" />
		<appender-ref ref="RollingFileInfo" />
		<appender-ref ref="RollingFileWarn" />
		<appender-ref ref="RollingFileError" />
		<appender-ref ref="RollingFileDebug" />
	</root>

	<!--记录druid-sql的记录 -->
	<logger name="druid.sql.Statement" level="debug" additivity="false">
		<appender-ref ref="druidSqlRollingFile" />
	</logger>
	<logger name="druid.sql.Statement" level="debug" additivity="false">
		<appender-ref ref="druidSqlRollingFile" />
	</logger>

	<!--log4j2 自带过滤日志 -->
	<Logger name="org.apache.catalina.startup.DigesterFactory" level="error" />
	<Logger name="org.apache.catalina.util.LifecycleBase" level="error" />
	<Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn" />
	<logger name="org.apache.sshd.common.util.SecurityUtils" level="warn" />
	<Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn" />
	<Logger name="org.crsh.plugin" level="warn" />
	<logger name="org.crsh.ssh" level="warn" />
	<Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error" />
	<Logger name="org.hibernate.validator.internal.util.Version" level="warn" />
	<logger name="org.springframework.boot.actuate.autoconfigure.CrshAutoConfiguration" level="warn" />
	<logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn" />
	<logger name="org.thymeleaf" level="warn" />
</loggers>
</configuration>
